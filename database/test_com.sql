/*
 Navicat Premium Data Transfer

 Source Server         : 本地
 Source Server Type    : MySQL
 Source Server Version : 50717
 Source Host           : localhost:3306
 Source Schema         : test_com

 Target Server Type    : MySQL
 Target Server Version : 50717
 File Encoding         : 65001

 Date: 24/03/2020 17:02:43
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article`  (
  `article_id` int(11) NOT NULL AUTO_INCREMENT,
  `article_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '文章名称',
  `article_easy` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '简介',
  `article_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci COMMENT '文章内容',
  `created_at` datetime(0) DEFAULT NULL COMMENT '创建时间',
  `article_type_id` int(11) DEFAULT NULL COMMENT '类型',
  `article_img` text CHARACTER SET utf8 COLLATE utf8_general_ci COMMENT '封面',
  `now_read_time` datetime(0) DEFAULT NULL COMMENT '最后一个人读取时间',
  `updated_at` datetime(0) DEFAULT NULL,
  PRIMARY KEY (`article_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 13 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES (1, '关于having与where的使用', 'having与where尽管都是数据查找后的筛选步骤，但实际使用情况却截然不同', '<p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">简单描述：需要查询一个数量count，于是做分组查询后，发现有的数据没有过滤掉，于是就想加上过滤条件，就在group by后边写了where ，发现不好使，直接就报错了，查了一下，where只能写在group by前边，要想在后边加限制条件，应该使用having关键字</p><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">直接放结果：</p><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">先说一下聚合函数：</p><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">　　count(a):遇到每个元素 a就加1</p><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">　　其他的还有：</p><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">　　MAX(a)和MIN(a)：分别记录迄今为止见到的任意元素在属性a上的最大值或最小值，如果遇到了，就替换掉。</p><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">　　sum(a)：如果a不为null，则将值累加到输出值上</p><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">　　AVG(a)：计算出sum和count，然后相除</p><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">通常通过group by来比较where 和 having。这里说的是通常，并不是说having必须和group by连用，下面会进行说明</p><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">先来一条sql：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(73, 73, 73); font-size: 14px; background-color: rgb(199, 203, 189);\">select&nbsp;sum(score)&nbsp;from&nbsp;student&nbsp;where&nbsp;gender=&#39;boy&#39;&nbsp;group&nbsp;by&nbsp;name&nbsp;having&nbsp;sum(score)&gt;210;</pre><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">其次我们经常写的sql 就是 select count(a),sum(b) ....from tableName where .... 聚合函数都是在where 条件之前的，说明聚合函数的执行级别高于where</p><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">然后where 子句的作用是在对查询结果进行分组前，将不符合where条件的行去掉，也就是在分组之前过滤数据，条件中不能包含聚和函数，使用where条件限制特定的行。&nbsp;</p><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">最后having 子句的作用是筛选满足条件的组，即在分组之后过滤数据，条件中经常包含聚合函数，使用having 条件过滤特定的组，也可以使用多个分组标准进行分组。</p><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">总之一条sql中有where having group by的时候，顺序是 where&nbsp; group by having</p><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">&nbsp;</p><h3 style=\"font-size: 16px; line-height: 1.5; margin: 10px 0px; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(199, 203, 189);\">where和having都可以使用的场景：</h3><pre class=\"prettyprint\" style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(73, 73, 73); font-size: 14px; background-color: rgb(199, 203, 189);\">&nbsp;&nbsp;&nbsp;&nbsp;select&nbsp;price,name&nbsp;from&nbsp;goods&nbsp;where&nbsp;price&nbsp;&gt;&nbsp;100</pre><pre class=\"prettyprint\" style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(73, 73, 73); font-size: 14px; background-color: rgb(199, 203, 189);\">&nbsp;&nbsp;&nbsp;&nbsp;select&nbsp;price,name&nbsp;from&nbsp;goods&nbsp;having&nbsp;price&nbsp;&gt;&nbsp;100</pre><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">说明：having可用的前提是已经筛选出了price字段，在这种情况下和where的效果是等效的，But如果没有select price 就会报错！！因为having是从前筛选的字段再筛选，而where是从数据表中的字段直接进行的筛选的。</p><h3 style=\"font-size: 16px; line-height: 1.5; margin: 10px 0px; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(199, 203, 189);\">只可以用where，不可以用having的情况</h3><pre class=\"prettyprint\" style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(73, 73, 73); font-size: 14px; background-color: rgb(199, 203, 189);\">&nbsp;&nbsp;&nbsp;&nbsp;select&nbsp;name&nbsp;from&nbsp;goods&nbsp;where&nbsp;price&gt;&nbsp;100</pre><pre class=\"prettyprint\" style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(73, 73, 73); font-size: 14px; background-color: rgb(199, 203, 189);\">&nbsp;&nbsp;&nbsp;&nbsp;select&nbsp;name&nbsp;from&nbsp;goods&nbsp;having&nbsp;price&gt;&nbsp;100&nbsp;//报错！！！因为select没有筛选出price&nbsp;字段，having不能用,而where是对表进行检索price。100</pre><h3 style=\"font-size: 16px; line-height: 1.5; margin: 10px 0px; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(199, 203, 189);\">只可以用having，不可以用where情况</h3><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">查询每种id 商品价格的平均值，获取平均价格大于100元的商品信息</p><pre class=\"prettyprint\" style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(73, 73, 73); font-size: 14px; background-color: rgb(199, 203, 189);\">&nbsp;&nbsp;&nbsp;&nbsp;select&nbsp;id,&nbsp;avg(price)&nbsp;as&nbsp;agprice&nbsp;from&nbsp;goods&nbsp;group&nbsp;by&nbsp;id&nbsp;having&nbsp;agprice&nbsp;&gt;&nbsp;100</pre><pre class=\"prettyprint\" style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(73, 73, 73); font-size: 14px; background-color: rgb(199, 203, 189);\">&nbsp;&nbsp;&nbsp;&nbsp;select&nbsp;id,&nbsp;avg(price)&nbsp;as&nbsp;agprice&nbsp;from&nbsp;goods&nbsp;where&nbsp;agprice&gt;100&nbsp;group&nbsp;by&nbsp;id&nbsp;//报错！！因为from&nbsp;goods这表里面没有agprice这个字段</pre><p style=\"margin: 10px auto; color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(199, 203, 189);\">&nbsp;</p><p>参考博客:<a href=\"https://www.cnblogs.com/xuchao0506/p/9766234.html\">https://www.cnblogs.com/xuchao0506/p/9766234.html</a></p><p><br/></p>', '2020-02-26 17:23:48', 4, NULL, '2020-02-27 16:51:49', '2020-03-06 08:50:17');
INSERT INTO `article` VALUES (2, '查找并删除数组中的一个键值', 'php删除数组中指定值的元素的几种方法', '<p>参考地址:<a href=\"http://www.utubon.com/post/705.html\">http://www.utubon.com/post/705.html</a> </p><p style=\"padding: 0px; margin-top: 2em; margin-bottom: 2em; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal; background-color: rgb(255, 255, 255);\">在一些特殊情况下，你需要删除数组中的特定值，而且要全部删除，其实方法有很多种，我们通过本文来进行讨论。</p><p style=\"padding: 0px; margin-top: 2em; margin-bottom: 2em; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal; background-color: rgb(255, 255, 255);\">一、利用foreach和unset()函数删除数组中的特定元素</p><blockquote style=\"margin: 0px 0px 10px; border: 2px dashed rgb(204, 204, 204); background: url(&quot;../images/blockquote.gif&quot;) 5px 5px no-repeat rgb(244, 245, 247); padding: 20px; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal;\"><p style=\"padding: 0px; margin-top: 0px; margin-bottom: 0px;\">foreach($array as $k=&gt;$v){<br/>if($v == &#39;day&#39;){<br/>unset($array[$k]):<br/>}<br/>}</p></blockquote><p style=\"padding: 0px; margin-top: 2em; margin-bottom: 2em; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal; background-color: rgb(255, 255, 255);\">unset()函数即删除指定的数组值。</p><p style=\"padding: 0px; margin-top: 2em; margin-bottom: 2em; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal; background-color: rgb(255, 255, 255);\">二、利用array_flip()函数和unset()函数删除数组中的特定值</p><blockquote style=\"margin: 0px 0px 10px; border: 2px dashed rgb(204, 204, 204); background: url(&quot;../images/blockquote.gif&quot;) 5px 5px no-repeat rgb(244, 245, 247); padding: 20px; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal;\"><p style=\"padding: 0px; margin-top: 0px; margin-bottom: 0px;\">$arr = array_flip($arr);<br/>unset($arr[&#39;world&#39;]);<br/>$arr = array_flip($arr);<br/>print_r($arr);</p></blockquote><p style=\"padding: 0px; margin-top: 2em; margin-bottom: 2em; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal; background-color: rgb(255, 255, 255);\">array_flip()是一个反转函数，将数组原来的键名变为键值，把键值变为键名，这样上面的操作就很容易理解了。</p><p style=\"padding: 0px; margin-top: 2em; margin-bottom: 2em; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal; background-color: rgb(255, 255, 255);\">三、利用array_search()和unset()函数删除数组中的特定值</p><blockquote style=\"margin: 0px 0px 10px; border: 2px dashed rgb(204, 204, 204); background: url(&quot;../images/blockquote.gif&quot;) 5px 5px no-repeat rgb(244, 245, 247); padding: 20px; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal;\"><p style=\"padding: 0px; margin-top: 0px; margin-bottom: 0px;\">if(($key = array_search(&#39;day&#39;,$arr))){<br/>unset($arr[$key]);<br/>}</p></blockquote><p style=\"padding: 0px; margin-top: 2em; margin-bottom: 2em; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal; background-color: rgb(255, 255, 255);\">array_search() 函数与 in_array() 一样，在数组中查找一个键值。如果找到了该值，匹配元素的键名会被返回。如果没找到，则返回 false。</p><p style=\"padding: 0px; margin-top: 2em; margin-bottom: 2em; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal; background-color: rgb(255, 255, 255);\">四、array_splice()函数可以与unset()函数起到相同作用</p><blockquote style=\"margin: 0px 0px 10px; border: 2px dashed rgb(204, 204, 204); background: url(&quot;../images/blockquote.gif&quot;) 5px 5px no-repeat rgb(244, 245, 247); padding: 20px; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal;\"><p style=\"padding: 0px; margin-top: 0px; margin-bottom: 0px;\">if(($key = array_search(&#39;day&#39;,$arr))){<br/>array_splice($arr, $key,1);<br/>}</p></blockquote><p style=\"padding: 0px; margin-top: 2em; margin-bottom: 2em; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal; background-color: rgb(255, 255, 255);\">array_splice()有四个参数，用法请看<a href=\"http://www.w3school.com.cn/php/func_array_splice.asp\" target=\"_blank\" style=\"color: rgb(152, 42, 44); text-decoration-line: none; margin: 0px 2px;\">这里</a>。</p><p style=\"padding: 0px; margin-top: 2em; margin-bottom: 2em; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal; background-color: rgb(255, 255, 255);\">五、array_unique()让这个特定值在数组中一个不留</p><p style=\"padding: 0px; margin-top: 2em; margin-bottom: 2em; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 0, 0);\">注意：上面的所有操作只是删除了数组中第一个和你给定的值相同的元素，之后的元素即使和你给定的值相等，却没有被删除！</span></p><p style=\"padding: 0px; margin-top: 2em; margin-bottom: 2em; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal; background-color: rgb(255, 255, 255);\">在进行上面所有的代码操作之前，先进行array_unique($array)的操作，将数组中的重复值进行合并删除，再进行上面的删除，让数组中的重复值一个不留。</p><p style=\"padding: 0px; margin-top: 2em; margin-bottom: 2em; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal; background-color: rgb(255, 255, 255);\">六、只删除特定值对应的键值，不动其他值</p><p style=\"padding: 0px; margin-top: 2em; margin-bottom: 2em; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal; background-color: rgb(255, 255, 255);\">五中导致删除特定值的同时，也将其他无关的值合并了，那么不要动其他值怎么办？重复执行上面一~四的操作即可，获取数组长度，用一个for循环即可，当然这是最笨的办法~~</p><p style=\"padding: 0px; margin-top: 2em; margin-bottom: 2em; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal; background-color: rgb(255, 255, 255);\">获取数组长度的函数是count($arr)</p><blockquote style=\"margin: 0px 0px 10px; border: 2px dashed rgb(204, 204, 204); background: url(&quot;../images/blockquote.gif&quot;) 5px 5px no-repeat rgb(244, 245, 247); padding: 20px; color: rgb(51, 51, 51); font-family: &quot;Biaodian Pro Sans GB&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-size: 17.28px; white-space: normal;\"><p style=\"padding: 0px; margin-top: 0px; margin-bottom: 0px;\">for(count($arr))if($key = array_search(&#39;day&#39;,$arr))array_splice($arr,$key,1);</p></blockquote><p><br/></p>', '2020-02-27 17:09:30', 1, NULL, '2020-02-27 17:09:36', '2020-03-06 08:17:26');
INSERT INTO `article` VALUES (3, 'Laravel配置全局公共函数的方法步骤', 'Laravel不自带全局函数的文件,只能自己手动添加', '<p style=\"margin: 10px auto; line-height: 1.5; font-size: 13px; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(40, 85, 126);\"><strong>前言</strong></p><p style=\"margin: 10px auto; line-height: 1.5; font-size: 13px; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(40, 85, 126);\">在laravel项目开发中，经常使用到公共函数，那如何在laravel配置全局公共函数呢？？下面话不多说了，来一起看看详细的介绍吧</p><p style=\"margin: 10px auto; line-height: 1.5; font-size: 13px; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(40, 85, 126);\"><strong>方法如下</strong></p><p style=\"margin: 10px auto; line-height: 1.5; font-size: 13px; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(40, 85, 126);\">在Laravel项目中我们常常需要定义一些全局的公共函数，通常我们会将这些公共函数定义在一个单独的文件里，如helpers.php中。我们在app目录下创建一个名为helpers.php的文件(app/helpers.php)，并编辑其内容如下:</p><p style=\"margin: 10px auto; line-height: 1.5; font-size: 13px; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(40, 85, 126);\">&nbsp;</p><p><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"color: rgb(51, 102, 153); background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border: none !important;\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; overflow-wrap: break-word; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\">/**\n&nbsp;*&nbsp;字符串两次md5加密\n&nbsp;*&nbsp;@param&nbsp;$str&nbsp;要加密的字符串&nbsp;*/function&nbsp;double_md5($str)&nbsp;{&nbsp;\n&nbsp;return&nbsp;md5(md5(trim($str)));\n}</pre><p><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"color: rgb(51, 102, 153); background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border: none !important;\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"/></a></span></p><p style=\"margin: 10px auto; line-height: 1.5; font-size: 13px; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(40, 85, 126);\">&nbsp;</p><p style=\"margin: 10px auto; line-height: 1.5; font-size: 13px; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(40, 85, 126);\">&nbsp;</p><p style=\"margin: 10px auto; line-height: 1.5; font-size: 13px; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(40, 85, 126);\">该函数返回对一个字符串进行两次md5加密后返回的字符串。要让应用能够正确找到 helpers.php 文件，还要修改项目根目录下 composer.json 的 autoload 配置：</p><p style=\"margin: 10px auto; line-height: 1.5; font-size: 13px; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(40, 85, 126);\">&nbsp;</p><p><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"color: rgb(51, 102, 153); background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border: none !important;\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; overflow-wrap: break-word; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\">&quot;autoload&quot;:&nbsp;{&nbsp;&nbsp;&quot;classmap&quot;:&nbsp;[&nbsp;&nbsp;&nbsp;&quot;database/seeds&quot;,&nbsp;&nbsp;&nbsp;&quot;database/factories&quot;\n&nbsp;&nbsp;],&nbsp;&nbsp;&quot;psr-4&quot;:&nbsp;{&nbsp;&nbsp;&nbsp;&quot;App\\\\&quot;:&nbsp;&quot;app/&quot;\n&nbsp;&nbsp;},&nbsp;&nbsp;&quot;files&quot;:&nbsp;[&nbsp;&nbsp;&nbsp;&quot;app/helpers.php&quot;\n&nbsp;&nbsp;]\n&nbsp;},</pre><p><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"color: rgb(51, 102, 153); background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border: none !important;\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"/></a></span></p><p style=\"margin: 10px auto; line-height: 1.5; font-size: 13px; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(40, 85, 126);\">&nbsp;</p><p style=\"margin: 10px auto; line-height: 1.5; font-size: 13px; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(40, 85, 126);\">在 autoload 配置项的 files 数组中指定要被加载的文件/文件夹。修改完成后记得运行 composer dump-autoload 确保让修改生效：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; overflow-wrap: break-word; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\">composer&nbsp;dump-autoload#&nbsp;或composer&nbsp;dumpautoload</pre><p style=\"margin: 10px auto; line-height: 1.5; font-size: 13px; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(40, 85, 126);\">&nbsp;</p><p>&nbsp;</p><p style=\"margin: 10px auto; line-height: 1.5; font-size: 13px; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(40, 85, 126);\">现在 helpers.php 中的所有函数都会载入到自动加载器中，你可以在你项目的代码中使用helpers.php文件中定义的函数了。</p><p><br/></p><p>参考：https://www.cnblogs.com/jasonLiu2018/p/11770121.html<br/></p>', '2020-02-27 17:19:38', 3, NULL, '2020-02-27 17:19:42', '2020-03-06 08:50:30');
INSERT INTO `article` VALUES (4, 'layui在实际应用中数据表格因未知原因显示不出Object中的数据', 'layui的数据表格应用', '<p>参考地址:<a href=\"https://blog.csdn.net/qq_37055500/article/details/80796256\">https://blog.csdn.net/qq_37055500/article/details/80796256</a> </p><p><br/></p><p style=\"box-sizing: border-box; outline: 0px; margin-top: 0px; margin-bottom: 16px; padding: 0px; font-family: &quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif; color: rgb(77, 77, 77); line-height: 26px; overflow-x: auto; overflow-wrap: break-word; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, 微软雅黑, Tahoma, Arial, sans-serif; overflow-wrap: break-word; color: rgb(51, 51, 51);\">最近使用layui前端框架，遇到前端页面无法获取Object下的字段的问题。</span></p><p style=\"box-sizing: border-box; outline: 0px; margin-top: 0px; margin-bottom: 16px; padding: 0px; font-family: &quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif; color: rgb(77, 77, 77); line-height: 26px; overflow-x: auto; overflow-wrap: break-word; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, 微软雅黑, Tahoma, Arial, sans-serif; overflow-wrap: break-word; color: rgb(51, 51, 51);\">如field:&#39;user.name&#39;,title:&#39;创建人&#39;,这样显示不行的，要如何显示呢</span></p><p style=\"box-sizing: border-box; outline: 0px; margin-top: 0px; margin-bottom: 16px; padding: 0px; font-family: &quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif; color: rgb(77, 77, 77); line-height: 26px; overflow-x: auto; overflow-wrap: break-word; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, 微软雅黑, Tahoma, Arial, sans-serif; overflow-wrap: break-word; color: rgb(51, 51, 51);\"><span style=\"color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, 微软雅黑, Tahoma, Arial, sans-serif; background-color: rgb(255, 255, 255);\">table的数据绑定:</span></span></p><p><img src=\"/ueditor/php/upload/image/20200314/1584173525.png\" title=\"1584173525.png\" alt=\"微信截图_20200314161108.png\"/></p><p><br/></p><p><img src=\"/ueditor/php/upload/image/20200314/1584173549.png\" title=\"1584173549.png\" alt=\"微信截图_20200314161131.png\"/><img src=\"/ueditor/php/upload/image/20200314/1584173554.png\" title=\"1584173554.png\" alt=\"微信截图_20200314161139.png\"/></p><p><br/></p>', '2020-03-04 17:08:09', 4, NULL, '2020-03-04 17:09:46', '2020-03-14 08:13:18');
INSERT INTO `article` VALUES (5, 'Thinkphp框架的环境下 在模型中使用了获取器，所有使用模型获取数据都将自动通过获取器转化数据,但是应用场景中，并不一定都要一样的数据', '如何将获取器中的数据重新返回 或者是单独使用获取器', '<p>官方手册:<a href=\"https://www.kancloud.cn/manual/thinkphp5_1/354046\">https://www.kancloud.cn/manual/thinkphp5_1/354046</a> </p><p><br/></p><h2 style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; padding: 0px 0px 0.3em; font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, Helvetica, sans-serif; line-height: 1.225; margin: 0px 0px 14px; font-weight: 400; font-size: 24px; border-bottom: 1px solid rgb(238, 238, 238); color: rgb(82, 82, 82); white-space: normal; background-color: rgb(255, 255, 255);\">获取器</h2><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 20px; margin-bottom: 20px; line-height: 2; padding: 0px; color: rgb(82, 82, 82); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">获取器的作用是对模型实例的（原始）数据做出自动处理。一个获取器对应模型的一个特殊方法（该方法必须为<code style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; display: inline-block; border-radius: 4px; padding: 2px 6px; background: rgb(249, 250, 250); word-break: break-all; white-space: pre; line-height: 1.3; margin: 0px 5px; border: 1px solid rgb(222, 217, 217);\">public</code>类型），方法命名规范为：</p><blockquote class=\"info\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin: 14px 0px; line-height: 1.2; padding: 5px 5px 5px 15px; color: rgb(91, 192, 222); border-left: 4px solid rgb(91, 192, 222); background-color: rgb(244, 248, 250); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal;\"><h3 style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; padding: 0px; font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, Helvetica, sans-serif; line-height: 1.43; margin: 0px; font-weight: 400; font-size: 1.2em;\"><a style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; background-color: transparent; color: rgb(65, 131, 196); position: absolute; margin-top: -66px;\"></a>get<span style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-weight: bolder;\">FieldName</span>Attr</h3></blockquote><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 20px; margin-bottom: 20px; line-height: 2; padding: 0px; color: rgb(82, 82, 82); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><code style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; display: inline-block; border-radius: 4px; padding: 2px 6px; background: rgb(249, 250, 250); word-break: break-all; white-space: pre; line-height: 1.3; margin: 0px 5px; border: 1px solid rgb(222, 217, 217);\">FieldName</code>为数据表字段的驼峰转换，定义了获取器之后会在下列情况自动触发：</p><ul style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 14px; margin-bottom: 14px; line-height: 1.2; padding: 0px 0px 0px 28px; color: rgb(82, 82, 82); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>模型的数据对象取值操作（<code style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; display: inline-block; border-radius: 4px; padding: 2px 6px; background: rgb(249, 250, 250); word-break: break-all; white-space: pre; line-height: 1.3; margin: 0px 5px; border: 1px solid rgb(222, 217, 217);\">$model-&gt;field_name</code>）；</p></li><li><p>模型的序列化输出操作（<code style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; display: inline-block; border-radius: 4px; padding: 2px 6px; background: rgb(249, 250, 250); word-break: break-all; white-space: pre; line-height: 1.3; margin: 0px 5px; border: 1px solid rgb(222, 217, 217);\">$model-&gt;toArray()</code>及<code style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; display: inline-block; border-radius: 4px; padding: 2px 6px; background: rgb(249, 250, 250); word-break: break-all; white-space: pre; line-height: 1.3; margin: 0px 5px; border: 1px solid rgb(222, 217, 217);\">toJson()</code>）；</p></li><li><p>显式调用<code style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; display: inline-block; border-radius: 4px; padding: 2px 6px; background: rgb(249, 250, 250); word-break: break-all; white-space: pre; line-height: 1.3; margin: 0px 5px; border: 1px solid rgb(222, 217, 217);\">getAttr</code>方法（<code style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; display: inline-block; border-radius: 4px; padding: 2px 6px; background: rgb(249, 250, 250); word-break: break-all; white-space: pre; line-height: 1.3; margin: 0px 5px; border: 1px solid rgb(222, 217, 217);\">$this-&gt;getAttr(&#39;field_name&#39;)</code>）；</p></li></ul><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 20px; margin-bottom: 20px; line-height: 2; padding: 0px; color: rgb(82, 82, 82); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">获取器的场景包括：</p><ul style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 14px; margin-bottom: 14px; line-height: 1.2; padding: 0px 0px 0px 28px; color: rgb(82, 82, 82); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>时间日期字段的格式化输出；</p></li><li><p>集合或枚举类型的输出；</p></li><li><p>数字状态字段的输出；</p></li><li><p>组合字段的输出；</p></li></ul><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 20px; margin-bottom: 20px; line-height: 2; padding: 0px; color: rgb(82, 82, 82); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">例如，我们需要对状态值进行转换，可以使用：</p><pre style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; margin-top: 0px; margin-bottom: 14px; line-height: 1.45; padding: 16px; overflow: auto; background-color: rgb(249, 250, 250); border: 1px solid rgb(222, 217, 217); border-radius: 3px;\">&lt;?php\nclass&nbsp;User&nbsp;extends&nbsp;Model&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;getStatusAttr($value)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$status&nbsp;=&nbsp;[-1=&gt;&#39;删除&#39;,0=&gt;&#39;禁用&#39;,1=&gt;&#39;正常&#39;,2=&gt;&#39;待审核&#39;];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$status[$value];\n&nbsp;&nbsp;&nbsp;&nbsp;}}</pre><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 20px; margin-bottom: 20px; line-height: 2; padding: 0px; color: rgb(82, 82, 82); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">数据表的字段会自动转换为驼峰法，一般<code style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; display: inline-block; border-radius: 4px; padding: 2px 6px; background: rgb(249, 250, 250); word-break: break-all; white-space: pre; line-height: 1.3; margin: 0px 5px; border: 1px solid rgb(222, 217, 217);\">status</code>字段的值采用数值类型，我们可以通过获取器定义，自动转换为字符串描述。</p><pre style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; margin-top: 0px; margin-bottom: 14px; line-height: 1.45; padding: 16px; overflow: auto; background-color: rgb(249, 250, 250); border: 1px solid rgb(222, 217, 217); border-radius: 3px;\">$user&nbsp;=&nbsp;User::get(1);echo&nbsp;$user-&gt;status;&nbsp;//&nbsp;例如输出“正常”</pre><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 20px; margin-bottom: 20px; line-height: 2; padding: 0px; color: rgb(82, 82, 82); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">获取器还可以定义数据表中不存在的字段，例如：</p><pre style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; margin-top: 0px; margin-bottom: 14px; line-height: 1.45; padding: 16px; overflow: auto; background-color: rgb(249, 250, 250); border: 1px solid rgb(222, 217, 217); border-radius: 3px;\">&lt;?php\nclass&nbsp;User&nbsp;extends&nbsp;Model&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;getStatusTextAttr($value,$data)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$status&nbsp;=&nbsp;[-1=&gt;&#39;删除&#39;,0=&gt;&#39;禁用&#39;,1=&gt;&#39;正常&#39;,2=&gt;&#39;待审核&#39;];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$status[$data[&#39;status&#39;]];\n&nbsp;&nbsp;&nbsp;&nbsp;}}</pre><blockquote class=\"default\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin: 8px 0px; line-height: 1.2; padding: 8px 16px; color: rgb(91, 192, 222); border-left: 5px solid rgb(91, 192, 222); background-color: rgb(244, 248, 250); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal;\"><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 20px; margin-bottom: 20px; line-height: 2; padding: 0px;\">获取器方法的第二个参数传入的是当前的所有数据数组。</p></blockquote><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 20px; margin-bottom: 20px; line-height: 2; padding: 0px; color: rgb(82, 82, 82); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">我们就可以直接使用status_text字段的值了，例如：</p><pre style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; margin-top: 0px; margin-bottom: 14px; line-height: 1.45; padding: 16px; overflow: auto; background-color: rgb(249, 250, 250); border: 1px solid rgb(222, 217, 217); border-radius: 3px;\">$user&nbsp;=&nbsp;User::get(1);echo&nbsp;$user-&gt;status_text;&nbsp;//&nbsp;例如输出“正常”</pre><h2 style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; padding: 0px 0px 0.3em; font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, Helvetica, sans-serif; line-height: 1.225; margin: 14px 0px; font-weight: 400; font-size: 24px; border-bottom: 1px solid rgb(238, 238, 238); color: rgb(82, 82, 82); white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; background-color: transparent; color: rgb(65, 131, 196); position: absolute; margin-top: -66px;\"></a>获取原始数据</h2><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 20px; margin-bottom: 20px; line-height: 2; padding: 0px; color: rgb(82, 82, 82); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">如果你定义了获取器的情况下，希望获取数据表中的原始数据，可以使用：</p><pre style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; margin-top: 0px; margin-bottom: 14px; line-height: 1.45; padding: 16px; overflow: auto; background-color: rgb(249, 250, 250); border: 1px solid rgb(222, 217, 217); border-radius: 3px;\">$user&nbsp;=&nbsp;User::get(1);//&nbsp;通过获取器获取字段echo&nbsp;$user-&gt;status;//&nbsp;获取原始字段数据echo&nbsp;$user-&gt;getData(&#39;status&#39;);//&nbsp;获取全部原始数据dump($user-&gt;getData());</pre><h2 style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; padding: 0px 0px 0.3em; font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, Helvetica, sans-serif; line-height: 1.225; margin: 14px 0px; font-weight: 400; font-size: 24px; border-bottom: 1px solid rgb(238, 238, 238); color: rgb(82, 82, 82); white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; background-color: transparent; color: rgb(65, 131, 196); position: absolute; margin-top: -66px;\"></a>动态获取器（<code style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; display: inline-block; border-radius: 4px; padding: 2px 6px; background: rgb(249, 250, 250); word-break: break-all; white-space: pre; line-height: 1.3; margin: 0px 5px; border: 1px solid rgb(222, 217, 217);\">V5.1.20+</code>）</h2><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 20px; margin-bottom: 20px; line-height: 2; padding: 0px; color: rgb(82, 82, 82); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">从<code style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; display: inline-block; border-radius: 4px; padding: 2px 6px; background: rgb(249, 250, 250); word-break: break-all; white-space: pre; line-height: 1.3; margin: 0px 5px; border: 1px solid rgb(222, 217, 217);\">V5.1.20+</code>版本开始，可以支持对模型使用动态获取器，无需在模型类中定义获取器方法。</p><pre style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; margin-top: 0px; margin-bottom: 14px; line-height: 1.45; padding: 16px; overflow: auto; background-color: rgb(249, 250, 250); border: 1px solid rgb(222, 217, 217); border-radius: 3px;\">User::withAttr(&#39;name&#39;,&nbsp;function($value,&nbsp;$data)&nbsp;{\n	return&nbsp;strtolower($value);})-&gt;select();</pre><blockquote class=\"default\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin: 8px 0px; line-height: 1.2; padding: 8px 16px; color: rgb(91, 192, 222); border-left: 5px solid rgb(91, 192, 222); background-color: rgb(244, 248, 250); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal;\"><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 20px; margin-bottom: 20px; line-height: 2; padding: 0px;\"><code style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; display: inline-block; border-radius: 4px; padding: 2px 6px; background: rgb(249, 250, 250); word-break: break-all; white-space: pre; line-height: 1.3; margin: 0px 5px; border: 1px solid rgb(222, 217, 217);\">withAttr</code>方法支持多次调用，定义多个字段的获取器。另外注意，<code style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; display: inline-block; border-radius: 4px; padding: 2px 6px; background: rgb(249, 250, 250); word-break: break-all; white-space: pre; line-height: 1.3; margin: 0px 5px; border: 1px solid rgb(222, 217, 217);\">withAttr</code>方法之后不能再使用模型的查询方法，必须使用Db类的查询方法。</p></blockquote><blockquote class=\"danger\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin: 14px 0px; line-height: 1.2; padding: 5px 5px 5px 15px; color: rgb(217, 83, 79); border-left: 4px solid rgb(217, 83, 79); background-color: rgb(253, 247, 247); border-top-color: rgb(217, 83, 79); border-right-color: rgb(217, 83, 79); border-bottom-color: rgb(217, 83, 79); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal;\"><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 20px; margin-bottom: 20px; line-height: 2; padding: 0px;\">如果同时还在模型里面定义了相同字段的获取器，则动态获取器优先，也就是可以临时覆盖定义某个字段的获取器。</p></blockquote><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 20px; margin-bottom: 20px; line-height: 2; padding: 0px; color: rgb(82, 82, 82); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">支持对关联模型的字段使用动态获取器，例如：</p><pre style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; margin-top: 0px; margin-bottom: 14px; line-height: 1.45; padding: 16px; overflow: auto; background-color: rgb(249, 250, 250); border: 1px solid rgb(222, 217, 217); border-radius: 3px;\">User::with(&#39;profile&#39;)-&gt;withAttr(&#39;profile.name&#39;,&nbsp;function($value,&nbsp;$data)&nbsp;{\n	return&nbsp;strtolower($value);})-&gt;select();</pre><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 20px; margin-bottom: 20px; line-height: 2; padding: 0px; color: rgb(82, 82, 82); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">并且支持对<code style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; display: inline-block; border-radius: 4px; padding: 2px 6px; background: rgb(249, 250, 250); word-break: break-all; white-space: pre; line-height: 1.3; margin: 0px 5px; border: 1px solid rgb(222, 217, 217);\">JSON</code>字段使用获取器，例如在模型中定义了<code style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; display: inline-block; border-radius: 4px; padding: 2px 6px; background: rgb(249, 250, 250); word-break: break-all; white-space: pre; line-height: 1.3; margin: 0px 5px; border: 1px solid rgb(222, 217, 217);\">JSON</code>字段的话：</p><pre style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; margin-top: 0px; margin-bottom: 14px; line-height: 1.45; padding: 16px; overflow: auto; background-color: rgb(249, 250, 250); border: 1px solid rgb(222, 217, 217); border-radius: 3px;\">&lt;?php\nnamespace&nbsp;app\\index\\model;use&nbsp;think\\Model;class&nbsp;User&nbsp;extends&nbsp;Model{\n	//&nbsp;设置json类型字段\n	protected&nbsp;$json&nbsp;=&nbsp;[&#39;info&#39;];}</pre><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 20px; margin-bottom: 20px; line-height: 2; padding: 0px; color: rgb(82, 82, 82); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">可以使用下面的代码定义JSON字段的获取器。</p><pre style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; margin-top: 0px; margin-bottom: 14px; line-height: 1.45; padding: 16px; overflow: auto; background-color: rgb(249, 250, 250); border: 1px solid rgb(222, 217, 217); border-radius: 3px;\">User::withAttr(&#39;info.name&#39;,&nbsp;function($value,&nbsp;$data)&nbsp;{\n	return&nbsp;strtolower($value);})-&gt;select();</pre><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; margin-top: 20px; margin-bottom: 20px; line-height: 2; padding: 0px; color: rgb(82, 82, 82); font-family: &quot;Helvetica Neue&quot;, NotoSansHans-Regular, AvenirNext-Regular, arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, &quot;WenQuanYi Micro Hei&quot;, serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><code style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; display: inline-block; border-radius: 4px; padding: 2px 6px; background: rgb(249, 250, 250); word-break: break-all; white-space: pre; line-height: 1.3; margin: 0px 5px; border: 1px solid rgb(222, 217, 217);\">V5.1.22+</code>版本开始，可以在查询之后使用withAttr方法，例如：</p><pre style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; margin-top: 0px; margin-bottom: 14px; line-height: 1.45; padding: 16px; overflow: auto; background-color: rgb(249, 250, 250); border: 1px solid rgb(222, 217, 217); border-radius: 3px;\">User::select()-&gt;withAttr(&#39;name&#39;,&nbsp;function($value,&nbsp;$data)&nbsp;{\n	return&nbsp;strtolower($value);});</pre><p><br/></p>', '2020-03-05 14:04:46', 5, NULL, '2020-03-05 14:04:49', '2020-03-14 08:14:42');
INSERT INTO `article` VALUES (6, 'Laravel用户与认证', '自动生成的用户与认证系统', '使用artisan命令生成数据库的用户表  ， php artisan migrate     这个命令会运行database/migrations/目录下的php文件，创建对应的数据库表    打开域名下的/register URL页面，注册用户将增加到users表中', '2020-03-05 15:37:41', 3, NULL, '2020-03-05 15:37:43', NULL);
INSERT INTO `article` VALUES (7, 'Laravel的Ajax访问', 'Laravel的Ajax请求中GET可以正常使用web.php文件进行修改，但是POST请求并不能直接访问', '<p>这里有两种情况，</p><p><span style=\"font-size: 24px;\">一种为在web.php中增加接口路由</span></p><p><span style=\"font-size: 24px;\"><span style=\"font-size: 16px;\">需要在from标签中增加</span><br/></span></p><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;宋体&#39;;font-size:7.5pt;\">@csrf</pre><p>这是Laravel自带的表单验证</p><p><br/></p><p><span style=\"font-size: 24px;\">一种为在api.php中增加接口路由</span></p><p><span style=\"font-size: 24px;\"><span style=\"font-size: 16px;\">这一种比较简单且可以自定义验证方式</span><br/></span></p><p><br/></p><p>laravel5.5 已经引入了独立的无状态路由文件 api.php 作为 api 的开发，我们可以将接口需要的路由定义在该文件中</p><p><br/></p><p><img src=\"/ueditor/php/upload/image/20200306/1583484181.png\" title=\"1583484181.png\" alt=\"微信截图_20200306164057.png\"/><br/></p><p>定义路由并测试</p><p><br/></p><p><img src=\"/ueditor/php/upload/image/20200306/1583484187.png\" title=\"1583484187.png\" alt=\"微信截图_20200306164127.png\"/></p><p><br/></p><p><br/></p><p>注意：(这里我们要注意 5.5 版，api.php 文件中的路由已经自动为我们加上了 “api” 的前缀)；</p><p><br/></p><p>若要路由中加版本号可更改此前缀如下图：</p><p><br/></p><p><br/></p><p><img src=\"http://172.168.10.73:1236/ueditor/php/upload/image/20200306/1583484199.png\" title=\"1583484199.png\" alt=\"微信截图_20200306164145.png\"/></p><p><br/></p><p>引入自定义中间件</p><p>1. 自定义中间件文件</p><p><img src=\"/ueditor/php/upload/image/20200306/1583484217.png\" title=\"1583484217.png\" alt=\"微信截图_20200306164153.png\"/></p><p><br/></p><p>2. 注册中间件文件</p><p><br/></p><p><img src=\"/ueditor/php/upload/image/20200306/1583484221.png\" title=\"1583484221.png\" alt=\"微信截图_20200306164207.png\"/></p><p>3. 路由中使用</p><p><img src=\"/ueditor/php/upload/image/20200306/1583484268.png\" title=\"1583484268.png\" alt=\"微信截图_20200306164214.png\"/></p><p><br/></p><p>测试中间件的生效</p><p><br/></p><p><img src=\"/ueditor/php/upload/image/20200306/1583484272.png\" title=\"1583484272.png\" alt=\"微信截图_20200306164221.png\"/></p><p>自此简单的用 laravel5.5 实现 api 开发完结。</p><p><br/></p><p>参考博客:<a href=\"https://learnku.com/articles/17318#6b2d63\">https://learnku.com/articles/17318#6b2d63</a></p><p><br/></p><p><br/></p>', '2020-03-06 08:27:09', 3, NULL, '2020-03-14 15:39:45', '2020-03-06 08:50:38');
INSERT INTO `article` VALUES (8, '富文本挡住下拉框', 'ueditor的富文本与layui的表单一起使用时可能出现富文本挡住下拉框的情况', '<p style=\"box-sizing: border-box; outline: 0px; margin-top: 0px; margin-bottom: 16px; padding: 0px; font-family: &quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif; color: rgb(77, 77, 77); line-height: 26px; overflow-x: auto; overflow-wrap: break-word; white-space: normal; background-color: rgb(255, 255, 255);\">只需要在select最外层加一个div&nbsp; 给div设置一个属性即可</p><p style=\"box-sizing: border-box; outline: 0px; margin-top: 0px; margin-bottom: 16px; padding: 0px; font-family: &quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif; color: rgb(77, 77, 77); line-height: 26px; overflow-x: auto; overflow-wrap: break-word; white-space: normal; background-color: rgb(255, 255, 255);\">style=&quot;position: relative;z-index: 10000;&quot;&gt;&nbsp;</p><p><br/></p><p>&lt;div class=&quot;layui-form-item&quot; style=&quot;position: relative;z-index: 10000;&quot;&gt;</p><p>&nbsp; &nbsp; &nbsp;&lt;select name=&quot;cid&quot; lay-verify=&quot;cid&quot; required id=&quot;L_cid&quot;&gt;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;option value=&quot;&quot; &gt;请选择&lt;/option&gt;</p><p>&nbsp; &nbsp; &nbsp;&lt;/select&gt;</p><p>&lt;/div&gt;</p><p><br/></p><p>博客链接：https://blog.csdn.net/zixuan701/article/details/90712214</p><p><br/></p>', '2020-03-06 08:57:53', 1, NULL, '2020-03-14 15:39:49', '2020-03-06 09:05:16');
INSERT INTO `article` VALUES (9, 'PHP重置数组为连续数字索引的几种方式', 'PHP重置数组为连续数字索引的几种方式', '<p>比如这样的一个php数组：</p><p><br/></p><p><br/></p><p>$arr = array(</p><p>&nbsp; &nbsp; 1 =&gt; &#39;apple&#39;,</p><p>&nbsp; &nbsp; 3 =&gt; &#39;banana&#39;,</p><p>&nbsp; &nbsp; 5 =&gt; &#39;orange&#39;</p><p>);</p><p><br/></p><p>想要转换为这样的数组：</p><p><br/></p><p>$arr = array(</p><p>&nbsp; &nbsp; 0 =&gt; &#39;apple&#39;,</p><p>&nbsp; &nbsp; 1 =&gt; &#39;banana&#39;,</p><p>&nbsp; &nbsp; 2 =&gt; &#39;orange&#39;</p><p>);</p><p><br/></p><p>1、推荐的方式&nbsp; array_values 方法</p><p>这样方式无论对普通数组还是关联数组都适用</p><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p>&lt;?php</p><p>&nbsp;</p><p>$arr = array(</p><p>&nbsp; &nbsp; 1 =&gt; &#39;apple&#39;,</p><p>&nbsp; &nbsp; 3 =&gt; &#39;banana&#39;,</p><p>&nbsp; &nbsp; 5 =&gt; &#39;orange&#39;</p><p>);</p><p>&nbsp;</p><p>print_r(array_values($arr));</p><p>&nbsp;</p><p>$arr1 = array(</p><p>&nbsp; &nbsp; &#39;name&#39; =&gt; &#39;jerry&#39;,</p><p>&nbsp; &nbsp; &#39;age&#39; =&gt; 16,</p><p>&nbsp; &nbsp; &#39;height&#39; =&gt; &#39;18cm&#39;</p><p>);</p><p>&nbsp;</p><p>print_r(array_values($arr1));</p><p><br/></p><p><br/></p><p>输出结果：</p><p><br/></p><p><br/></p><p>[root@localhost php]# php array.php&nbsp;</p><p>Array</p><p>(</p><p>&nbsp; &nbsp; [0] =&gt; apple</p><p>&nbsp; &nbsp; [1] =&gt; banana</p><p>&nbsp; &nbsp; [2] =&gt; orange</p><p>)</p><p>Array</p><p>(</p><p>&nbsp; &nbsp; [0] =&gt; jerry</p><p>&nbsp; &nbsp; [1] =&gt; 16</p><p>&nbsp; &nbsp; [2] =&gt; 18cm</p><p>)</p><p><br/></p><p>2、使用 array_merge 方法</p><p>该方法如果只给了一个数组并且该数组是数字索引的，则键名会以连续方式重新索引。所以只能适用于数字索引。</p><p><br/></p><p><br/></p><p>&lt;?php</p><p>&nbsp;</p><p>$arr = array(</p><p>&nbsp; &nbsp; 1 =&gt; &#39;apple&#39;,</p><p>&nbsp; &nbsp; 3 =&gt; &#39;banana&#39;,</p><p>&nbsp; &nbsp; 5 =&gt; &#39;orange&#39;</p><p>);</p><p>&nbsp;</p><p>print_r(array_merge($arr));</p><p>&nbsp;</p><p>$arr1 = array(</p><p>&nbsp; &nbsp; &#39;name&#39; =&gt; &#39;jerry&#39;,</p><p>&nbsp; &nbsp; &#39;age&#39; =&gt; 16,</p><p>&nbsp; &nbsp; &#39;height&#39; =&gt; &#39;18cm&#39;</p><p>);</p><p>&nbsp;</p><p>print_r(array_merge($arr1));</p><p><br/></p><p>输出结果：</p><p><br/></p><p>[root@localhost php]# php array.php&nbsp;</p><p>Array</p><p>(</p><p>&nbsp; &nbsp; [0] =&gt; apple</p><p>&nbsp; &nbsp; [1] =&gt; banana</p><p>&nbsp; &nbsp; [2] =&gt; orange</p><p>)</p><p>Array</p><p>(</p><p>&nbsp; &nbsp; [name] =&gt; jerry</p><p>&nbsp; &nbsp; [age] =&gt; 16</p><p>&nbsp; &nbsp; [height] =&gt; 18cm</p><p>)</p><p><br/></p><p>3、循环遍历</p><p>最原始的方式，臃肿且不够优雅，极力抵制。</p><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p>&lt;?php</p><p>&nbsp;</p><p>function resetArr($arr){</p><p>&nbsp; &nbsp; $temp = array();</p><p>&nbsp; &nbsp; foreach($arr as $v){</p><p>&nbsp; &nbsp; &nbsp; &nbsp; $temp[] = $v;</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; return $temp;</p><p>}</p><p>&nbsp;</p><p>$arr = array(</p><p>&nbsp; &nbsp; 1 =&gt; &#39;apple&#39;,</p><p>&nbsp; &nbsp; 3 =&gt; &#39;banana&#39;,</p><p>&nbsp; &nbsp; 5 =&gt; &#39;orange&#39;</p><p>);</p><p>&nbsp;</p><p>print_r(resetArr($arr));</p><p>&nbsp;</p><p>$arr1 = array(</p><p>&nbsp; &nbsp; &#39;name&#39; =&gt; &#39;jerry&#39;,</p><p>&nbsp; &nbsp; &#39;age&#39; =&gt; 16,</p><p>&nbsp; &nbsp; &#39;height&#39; =&gt; &#39;18cm&#39;</p><p>);</p><p>&nbsp;</p><p>print_r(resetArr($arr1));</p><p><br/></p><p>That‘s it!</p><p><br/></p><p>原文链接：https://blog.csdn.net/zhang197093/article/details/78606916</p><p><br/></p>', '2020-03-12 08:54:14', 1, NULL, '2020-03-14 15:39:51', '2020-03-12 08:58:34');
INSERT INTO `article` VALUES (10, 'Laravel的模型关联初学者出现的小BUG', '模型关联与访问器同时使用时产生的小BUG', '<p>当模型关联与访问器同时使用时&nbsp;&nbsp;</p><p><br/></p><p>且访问器改变的为模型关联的外键时会产生一个小BUG</p><p><img src=\"/ueditor/php/upload/image/20200314/1584171219.png\" title=\"1584171219.png\" alt=\"微信截图_20200314151728 (2).png\"/></p><p><br/></p><p>控制器中写</p><p>Article::with(&quot;article_type&quot;)-&gt;get();</p><p><br/></p><p>获取时不会报错 但是模型获取为NULL</p><p><br/></p><p>通过查找原因发现是article_type_id被访问器转化成了别的</p><p><br/></p><p>而访问器比关联模型更早获取</p><p><br/></p><p>所以就造成了关联模型时表面为</p><p><br/></p><p>文章表article_type_id 与 文章类型表article_type_id</p><p><br/></p><p>但是实际上却变了</p><p><br/></p><p>后来找了百度</p><p><br/></p><p>将访问器的内容数据原样返回</p><p><br/></p><p>而将访问器访问出来的内容变为其他字段</p><p><br/></p><p><img src=\"/ueditor/php/upload/image/20200314/1584171215.png\" title=\"1584171215.png\" alt=\"微信截图_20200314151728.png\"/><br/></p><p><br/></p><p>这样就正常使用访问器与模型关联了</p>', '2020-03-14 07:24:04', 1, NULL, '2020-03-14 15:39:54', '2020-03-14 07:37:49');

-- ----------------------------
-- Table structure for article_type
-- ----------------------------
DROP TABLE IF EXISTS `article_type`;
CREATE TABLE `article_type`  (
  `article_type_id` int(11) NOT NULL AUTO_INCREMENT,
  `article_type_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '类型名称',
  `updated_at` datetime(0) DEFAULT NULL,
  `created_at` datetime(0) DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`article_type_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 11 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article_type
-- ----------------------------
INSERT INTO `article_type` VALUES (1, '数据库基础', NULL, NULL);
INSERT INTO `article_type` VALUES (2, 'PHP基础', NULL, NULL);
INSERT INTO `article_type` VALUES (3, 'Laravel学习', NULL, NULL);
INSERT INTO `article_type` VALUES (4, 'layui前端', NULL, NULL);
INSERT INTO `article_type` VALUES (5, 'Thinkphp进阶', NULL, NULL);

-- ----------------------------
-- Table structure for migrations
-- ----------------------------
DROP TABLE IF EXISTS `migrations`;
CREATE TABLE `migrations`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `migration` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of migrations
-- ----------------------------
INSERT INTO `migrations` VALUES (1, '2014_10_12_000000_create_users_table', 1);
INSERT INTO `migrations` VALUES (2, '2014_10_12_100000_create_password_resets_table', 1);
INSERT INTO `migrations` VALUES (3, '2019_12_03_082747_create_posts_table', 1);

-- ----------------------------
-- Table structure for password_resets
-- ----------------------------
DROP TABLE IF EXISTS `password_resets`;
CREATE TABLE `password_resets`  (
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `token` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp(0) DEFAULT NULL,
  INDEX `password_resets_email_index`(`email`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for posts
-- ----------------------------
DROP TABLE IF EXISTS `posts`;
CREATE TABLE `posts`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `slug` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `deleted_at` timestamp(0) DEFAULT NULL,
  `published_at` timestamp(0) DEFAULT NULL,
  `created_at` timestamp(0) DEFAULT NULL,
  `updated_at` timestamp(0) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `posts_slug_unique`(`slug`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 21 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of posts
-- ----------------------------
INSERT INTO `posts` VALUES (1, 'dolor-magnam-voluptatem-explicabo-beatae-aut-in', 'Dolor magnam voluptatem explicabo beatae aut in.', 'Maxime a blanditiis qui veritatis et dolorem id. Veniam qui laboriosam deserunt quam. Consequatur molestiae voluptates tempora nam odio nemo earum. Consequatur fugiat est consectetur reprehenderit ut minima numquam.\n\nSunt sed et sit odio. Sunt sunt asperiores dicta consequatur. Est consequatur doloremque recusandae.\n\nSunt architecto eligendi sunt voluptatem nemo. Qui doloribus voluptatibus nisi iste ut expedita.\n\nSit consequatur dolorem explicabo quidem in iusto natus voluptate. Inventore deserunt laudantium provident harum perspiciatis. Repellendus fugiat ad nam omnis temporibus veritatis.\n\nFacere nemo ut incidunt enim facere dolore. Earum quis illo qui eos. Consequatur repellendus et vero modi qui reprehenderit autem. Laudantium assumenda ut quia consequatur nisi.', NULL, '2019-11-06 03:54:18', '2019-12-03 08:40:18', '2019-12-03 08:40:18');
INSERT INTO `posts` VALUES (2, 'recusandae-dolor-libero-porro-voluptas', 'Recusandae dolor libero porro voluptas.', 'Et ut similique numquam consequatur corrupti. Beatae ea doloribus aut et molestiae voluptas consequuntur optio. Praesentium fuga ut placeat debitis.\n\nDoloremque vitae distinctio sit velit dolore et iste. Sunt numquam sit voluptas esse. Tenetur aspernatur saepe blanditiis excepturi voluptas repudiandae ratione. Quia qui veniam ut quis incidunt. Et voluptates quo dolor pariatur aut.\n\nNisi earum eaque vel. Autem ex est tempore facilis officiis quasi illum eum.\n\nSed placeat et tenetur temporibus quo eligendi. Aut dolor est sapiente. Modi quisquam harum voluptatibus modi quasi.\n\nEst qui at enim molestias beatae molestiae rerum. Odit est sed est veritatis ab cupiditate. Sit quo tenetur minima est.\n\nEa quo debitis quisquam aspernatur expedita labore pariatur. Saepe iste minima dolorem exercitationem nulla recusandae sed. Fugiat sed qui sint sit ratione voluptas dolor. Consequatur sit recusandae laboriosam dicta sequi dolorem dolore quia.', NULL, '2019-11-30 16:31:20', '2019-12-03 08:40:18', '2019-12-03 08:40:18');
INSERT INTO `posts` VALUES (3, 'aut-consequuntur-et-et-eaque-ad-repudiandae-ad-cumque-sint-facilis-dolorum-ut-accusantium', 'Aut consequuntur et et eaque ad repudiandae ad cumque sint facilis dolorum ut accusantium.', 'Expedita molestias voluptatem error aut reiciendis eum. Quam inventore doloremque ut autem. Ullam sit magnam temporibus quia. Reiciendis reiciendis aut voluptas ipsam libero non est vel.\n\nEst harum quia qui veniam dolorem vitae laboriosam. Omnis ut accusantium quae voluptas pariatur repellendus aut. Voluptas laudantium similique a quas vel esse aut id. Possimus maiores facilis nostrum non architecto rerum est.\n\nLaudantium porro sapiente at est. Numquam distinctio illo similique cupiditate. Quia laborum odio officiis nisi et vel aut. Corrupti distinctio deleniti ex enim itaque cum architecto impedit.\n\nAssumenda recusandae et id nihil eligendi sint accusamus. Cum velit molestiae ex autem. Facere necessitatibus aut accusantium nulla molestiae omnis. Harum non totam numquam ut quaerat necessitatibus vitae voluptatum. In aspernatur id sed ducimus doloribus nesciunt id.', NULL, '2019-11-07 15:40:27', '2019-12-03 08:40:18', '2019-12-03 08:40:18');
INSERT INTO `posts` VALUES (4, 'sapiente-et-dolorum-tempore', 'Sapiente et dolorum tempore.', 'Magnam reiciendis rerum dolorem eius omnis et et. Facere saepe qui placeat iure non. Occaecati aut earum et aspernatur eveniet.\n\nAliquam et ut consequatur est in. Consequatur maiores iure et occaecati quia unde reprehenderit. Exercitationem quas incidunt illo quaerat.\n\nQuibusdam tenetur modi sapiente. Qui dolore voluptas officiis doloremque aliquid voluptate. Eum similique sit reprehenderit aspernatur sint nam sint expedita.\n\nNam asperiores numquam aut. Veniam atque non voluptatem alias. Libero ipsam doloremque corrupti voluptatem.\n\nUt quaerat rem tempora ratione eveniet. Nobis libero minima nihil accusantium. Illum architecto molestias qui dicta accusamus quas.\n\nExcepturi nihil et quisquam vel. Tenetur dolores soluta doloribus qui est dolores sunt. Ab natus et nobis rem adipisci. Blanditiis ullam aut modi et ut ut.', NULL, '2019-11-22 05:03:23', '2019-12-03 08:40:18', '2019-12-03 08:40:18');
INSERT INTO `posts` VALUES (5, 'sed-beatae-laudantium-et-voluptate-et-neque-deleniti', 'Sed beatae laudantium et voluptate et neque deleniti.', 'Dolores sapiente neque sit. Excepturi ut mollitia iusto enim. A earum labore consequatur voluptas incidunt provident et. Pariatur sapiente provident sit.\n\nDolor necessitatibus dolore debitis magnam corrupti excepturi delectus non. Eos possimus aut ut vel. Perspiciatis est occaecati eos dicta voluptatibus nobis. Quia harum quasi nisi voluptatem voluptatem.\n\nAssumenda rem consequatur et qui veritatis corporis deserunt. Voluptates praesentium commodi earum repudiandae. Tempore est facilis odio.', NULL, '2019-11-10 23:47:47', '2019-12-03 08:40:18', '2019-12-03 08:40:18');
INSERT INTO `posts` VALUES (6, 'accusantium-quas-dolore', 'Accusantium quas dolore.', 'Et qui necessitatibus facilis vel molestiae odio beatae. Expedita omnis sequi numquam. Tempora vero et numquam assumenda repudiandae ut. Ea harum rerum rerum tenetur.\n\nTenetur sit est quia quaerat sed sint. Optio vel repellendus unde perspiciatis minima. Et sapiente tempore rerum. Laudantium consequuntur nam fugit dicta. Itaque hic dolorem corporis eum delectus eum.\n\nAut similique minima voluptatum nisi odit. Qui fugiat in atque atque nihil non. Pariatur id pariatur sed delectus quo natus. Illum voluptatibus quibusdam cupiditate quis deserunt ut.\n\nRem facilis est qui esse accusantium ut. Veniam temporibus voluptas corrupti distinctio sint. A quae in corrupti consequatur. Libero quae possimus iste distinctio sequi ab.\n\nEnim est id natus quae cum ex alias. Harum rerum voluptatem velit adipisci nam consequatur quam voluptatem.', NULL, '2019-11-09 03:22:04', '2019-12-03 08:40:18', '2019-12-03 08:40:18');
INSERT INTO `posts` VALUES (7, 'dolores-voluptatem-delectus-qui-rerum', 'Dolores voluptatem delectus qui rerum.', 'In ipsa ut dolore dolorum aliquid dolorum sit. Rerum dicta et consequatur minus et modi. Exercitationem ipsa quas ad qui recusandae voluptatem deleniti libero. Sed est cum maiores accusamus ut. Veritatis recusandae possimus rerum qui.\n\nVoluptas ipsa et voluptatum et ipsam qui. Nihil quos alias amet sit enim ducimus odio. Quis voluptates est facere beatae perspiciatis laborum velit. Dolor vel voluptatum est sapiente voluptas nam mollitia ex.\n\nAutem sit blanditiis ex quia tempore neque laudantium. Veniam tempora consequatur rerum. Autem exercitationem et eligendi a rerum qui. Ratione distinctio repellendus et repellat maxime dolorem molestiae vel.\n\nNecessitatibus unde in at libero. Quo ducimus cumque iste sed est ullam veritatis. Quam dolor cum consequuntur provident. Eveniet voluptates voluptatem voluptas maiores numquam vel earum.', NULL, '2019-11-28 18:09:13', '2019-12-03 08:40:18', '2019-12-03 08:40:18');
INSERT INTO `posts` VALUES (8, 'officia-doloremque-dolorem', 'Officia doloremque dolorem.', 'Placeat nostrum quam inventore beatae voluptatem ducimus assumenda. Praesentium consequatur reprehenderit ad iste consequatur dicta velit. Debitis quidem fuga cupiditate velit ratione id rerum.\n\nSit omnis ipsum voluptatem totam totam quibusdam neque. Amet blanditiis culpa illo maiores doloremque a sit. Tenetur tempore aut quo quas est dolor debitis beatae. Perspiciatis commodi omnis facilis temporibus aperiam possimus recusandae id.\n\nMagni nostrum rerum tempore odit ullam dolores. Ab vero at porro adipisci ad nihil. Commodi temporibus voluptas voluptatem dolor velit aut.\n\nVoluptatem est maxime nemo. Et hic nostrum quibusdam ipsum voluptatem labore. Praesentium perferendis similique in dolor commodi autem quam. Voluptatibus occaecati itaque tenetur id accusamus facilis voluptas.\n\nIn non officia magnam esse est quo. Et aut non nulla ipsa id dolorem. Libero qui sit nemo recusandae. Voluptates ipsa voluptatem reprehenderit quos praesentium error sit sed. Omnis quam voluptatem iure dolorum ullam molestiae sequi commodi.\n\nQuo animi omnis rem suscipit ex at. Cumque sapiente et magni et velit illo occaecati quibusdam. Officiis fuga accusantium iusto sunt ut. Error nesciunt dolorem quam aut doloribus quod.', NULL, '2019-11-21 18:04:25', '2019-12-03 08:40:19', '2019-12-03 08:40:19');
INSERT INTO `posts` VALUES (9, 'cupiditate-possimus-laboriosam-deserunt-molestias-voluptas-sunt', 'Cupiditate possimus laboriosam deserunt molestias voluptas sunt.', 'Porro rem blanditiis enim incidunt quisquam voluptatum laborum reiciendis. Consectetur placeat qui et veritatis eveniet quae. Esse qui accusantium qui. Aut sit consequatur eligendi doloremque numquam non.\n\nNon quia nostrum tenetur aut voluptatibus dolorem provident debitis. Molestiae suscipit iste non ipsa.\n\nDoloremque perspiciatis ipsa reiciendis pariatur vitae eligendi officia. Molestiae autem libero rerum rerum est voluptatem. Aspernatur fugit voluptates architecto vel culpa odio velit voluptas.\n\nAliquid aut dolores ipsam corporis tenetur commodi. Officiis tenetur reprehenderit consequatur odit dignissimos impedit. Eos architecto reprehenderit qui voluptas consectetur rerum quo. Explicabo non beatae blanditiis non impedit et.\n\nIn in fugit labore accusantium soluta qui. Cum veritatis est ipsum qui exercitationem. Sit rerum assumenda quia quos dolor dolorem quam. Dolore omnis voluptatem consequatur est cumque ex.', NULL, '2019-11-17 02:27:07', '2019-12-03 08:40:19', '2019-12-03 08:40:19');
INSERT INTO `posts` VALUES (10, 'laboriosam-molestias-et-distinctio-voluptas-non-explicabo-itaque', 'Laboriosam molestias et distinctio voluptas non explicabo itaque.', 'Laborum dolor eum ut deleniti qui nesciunt aut. Et qui ut accusantium. Sit sed cum dolor.\n\nAd animi ex soluta cum odit. Voluptate voluptatum harum corrupti qui repudiandae at. Qui exercitationem fugit voluptatem. Occaecati ipsam reiciendis distinctio.\n\nEum voluptatem dolorem eum expedita. Et vel sequi ex vel. Aut harum doloremque delectus consequatur id aliquid itaque. Possimus ipsum odit aperiam maiores.\n\nIusto sunt doloribus ea vitae voluptatibus. Adipisci sunt sit saepe impedit perspiciatis ipsa. Dignissimos iure quae reprehenderit. Autem est ut quod officiis non vel ut.', NULL, '2019-12-01 04:59:55', '2019-12-03 08:40:19', '2019-12-03 08:40:19');
INSERT INTO `posts` VALUES (11, 'magni-natus-reiciendis-porro-et-voluptate', 'Magni natus reiciendis porro et voluptate.', 'Nobis rem vel accusamus minus ab. Sed pariatur natus et repellendus vel ut. Sit eius aut velit necessitatibus. Suscipit laborum rerum veritatis quibusdam ipsa nostrum.\n\nMollitia molestiae et ut placeat labore. Et vel molestiae reiciendis qui explicabo quasi rerum. Eum rerum rem sunt omnis a.\n\nVelit praesentium voluptatem voluptatibus et ipsum maiores nisi eveniet. Veniam ratione sequi at aut molestiae. Quia est repellendus ut fugit expedita nobis excepturi. Occaecati quae molestiae neque voluptas laborum aut.\n\nSequi rerum dolores distinctio illum laborum expedita. Aspernatur qui qui ducimus accusamus nostrum. Incidunt ut sapiente aut deleniti voluptatem dolores. Reiciendis doloribus qui omnis minima doloribus.\n\nDolorem molestias eligendi provident animi exercitationem tempora qui. Et nulla magni facere quae molestiae aliquid vel.\n\nUt veritatis vero voluptatem corporis aliquid in aperiam. Accusamus nemo et officiis architecto debitis dolorem cum vel. Sapiente culpa delectus id placeat reiciendis tenetur quos doloribus. Veritatis harum natus nulla natus ut.', NULL, '2019-11-22 10:14:03', '2019-12-03 08:40:19', '2019-12-03 08:40:19');
INSERT INTO `posts` VALUES (12, 'laboriosam-voluptatibus-harum-veritatis-et-est-aut-vero-modi-accusamus', 'Laboriosam voluptatibus harum veritatis et est aut vero modi accusamus.', 'Velit et aut voluptas et. Hic soluta ea excepturi natus mollitia optio quibusdam. Cum sunt eaque laudantium eveniet vitae blanditiis.\n\nSunt qui et fugiat voluptatem. Animi expedita sit libero unde eum. Doloremque sit beatae quibusdam officia. Quo blanditiis quas dolorem debitis nostrum et doloribus.\n\nFugiat odit in atque quisquam quasi. Ea magni voluptatem ducimus nesciunt amet placeat vel molestiae. Nostrum odio accusamus adipisci.\n\nOfficiis aut ipsum vitae quidem commodi error. Earum et consequatur neque ullam est. Fugiat corrupti commodi eum. Soluta tempore culpa commodi occaecati qui.\n\nAmet magnam dicta ut aut. Quam magni nihil dolore sit et reprehenderit. Laboriosam maiores voluptatum aspernatur dolorem qui earum consectetur officia. Illum nemo nihil consequatur modi reprehenderit in.', NULL, '2019-12-01 07:59:11', '2019-12-03 08:40:19', '2019-12-03 08:40:19');
INSERT INTO `posts` VALUES (13, 'qui-repellendus-aut-et-provident-accusamus-sunt', 'Qui repellendus aut et provident accusamus sunt.', 'Consequatur dolorum explicabo veritatis et. Eveniet soluta fuga quo eum mollitia et.\n\nVoluptates dolores omnis in repellat. Cum ipsam temporibus molestiae sed repudiandae a. Est minus assumenda cumque. Asperiores reprehenderit asperiores consectetur cupiditate eos possimus.\n\nDucimus ex aut architecto qui placeat. Nisi id ipsam voluptatibus cumque veritatis. Expedita omnis sed eligendi dolorem sit nihil harum et. Voluptate eius neque ut facere consequuntur id. Rerum quasi ad optio enim et.\n\nEt ea ratione nulla quasi fugit at. Qui corrupti deserunt sequi. Voluptatem quia consequatur soluta quam. Ea illo optio rerum illo possimus adipisci.\n\nIllum velit rerum nihil. Aperiam sunt tempora dolorum nobis aut. Vel esse consequuntur magnam qui.\n\nAtque consectetur reiciendis minima qui. Quia natus veniam sit dolores ea. Ipsa pariatur error est repellat laborum ut.', NULL, '2019-11-05 11:31:58', '2019-12-03 08:40:19', '2019-12-03 08:40:19');
INSERT INTO `posts` VALUES (14, 'vel-saepe-et-nemo-non-magni', 'Vel saepe et nemo non magni.', 'Qui non aut tenetur ut ea quibusdam assumenda esse. Repudiandae nemo asperiores quam maiores soluta dolorem. Adipisci omnis corporis fugit quia id molestiae ipsa.\n\nAccusamus doloribus quisquam libero suscipit fuga eaque dolores. Facere repellendus aut et qui consectetur impedit magni. Ab quaerat quasi necessitatibus sit eum. Sunt non soluta non et sit fugiat.\n\nSed ipsa distinctio sunt perferendis. Neque cupiditate et assumenda molestiae minus at reprehenderit. Mollitia quis provident eveniet laudantium.\n\nQui quia aspernatur sint qui eius. Cupiditate quo voluptatem ad quod sit. Asperiores aspernatur quod illo aliquam. Cum aspernatur dolor aut praesentium. A a numquam aperiam atque officia doloremque.\n\nOdit recusandae commodi ab delectus. Esse et modi et maxime velit sed architecto voluptatem. Qui dolorem hic itaque excepturi veniam molestias quaerat qui. Alias maxime ullam neque libero non velit excepturi.\n\nQuia ullam sequi itaque eos dolorem. Temporibus sit autem ea. Rem necessitatibus sed deleniti et adipisci.', NULL, '2019-11-30 04:05:14', '2019-12-03 08:40:19', '2019-12-03 08:40:19');
INSERT INTO `posts` VALUES (15, 'saepe-qui-quo-quasi-nemo-aut', 'Saepe qui quo quasi nemo aut.', 'Et consequuntur quibusdam voluptas ut pariatur. Accusamus et inventore fugit magni. Natus aut et est magni iste animi.\n\nRepellat quis nulla blanditiis placeat et consequatur qui maiores. Aperiam velit qui veniam explicabo. Cum aut sapiente fugiat nihil. Exercitationem saepe ut ex voluptatem architecto sed sequi reprehenderit.\n\nVoluptatem culpa sed maxime qui eum. Dolores recusandae rem consequuntur.\n\nPariatur quia fugiat esse. Aut ut aut excepturi rerum ducimus. Consequatur quis molestiae sed corrupti cum natus est. Ratione maiores expedita recusandae est culpa nemo.\n\nAliquam nemo architecto similique. Consequatur dolores sed a sint quod placeat. Cupiditate accusamus esse vitae nihil vel vel atque.\n\nSunt cumque repudiandae quis ipsum non. Unde quis assumenda dolorem dolores sapiente aut et. Quia odit possimus nemo sed illo vel ratione. Minus expedita enim autem repudiandae autem expedita. Mollitia laborum dolore molestiae deleniti pariatur in labore.', NULL, '2019-11-21 02:20:16', '2019-12-03 08:40:20', '2019-12-03 08:40:20');
INSERT INTO `posts` VALUES (16, 'commodi-pariatur-blanditiis-atque-ut-perferendis-id-molestiae-aliquam', 'Commodi pariatur blanditiis atque ut perferendis id molestiae aliquam.', 'Sed reiciendis sed repudiandae sapiente ducimus amet veniam et. Rerum sed vero dolores veniam rerum sint. Ut non voluptas corrupti aliquid quaerat omnis qui magnam.\n\nUt quos iusto velit et repellendus et ipsum. Et maiores ea impedit doloremque quis tempora quas ut. Nesciunt voluptatum nam odit voluptate quis quod commodi. Maxime aut numquam quibusdam consectetur.\n\nIncidunt earum est mollitia aut rerum. Voluptatibus eligendi inventore eligendi autem nobis voluptate sunt tempore. Omnis velit aut doloribus iste ut similique veritatis. Sunt enim et unde sapiente qui.\n\nIpsum magni occaecati illum animi qui. Ratione voluptatem eum quaerat ullam. Molestias est odio fuga et doloremque odio.\n\nA neque quae et pariatur nemo dignissimos iure. Saepe ab corporis dolores dolorem hic quis. Similique ullam at et qui rerum quia. Eveniet non neque suscipit placeat sed at.\n\nExplicabo ducimus numquam veniam sunt. Quisquam omnis accusamus aut sit. Aut explicabo deserunt vero nemo consectetur et consequatur. Tenetur omnis deleniti est adipisci in hic quis.', NULL, '2019-11-22 17:00:48', '2019-12-03 08:40:20', '2019-12-03 08:40:20');
INSERT INTO `posts` VALUES (17, 'nostrum-quas-qui-placeat-eum-unde-id-iusto', 'Nostrum quas qui placeat eum unde id iusto.', 'Amet sed voluptates est. Aut voluptatem cupiditate quae totam. Quod omnis et magnam. Blanditiis sit fugiat sit et fuga ex.\n\nDeleniti iusto facere modi non dolorum corrupti. Necessitatibus ratione aut quae vel excepturi qui dolorem harum. Voluptates neque similique porro at. Ratione nihil debitis distinctio sed.\n\nSit tempora possimus voluptatum commodi fugiat delectus ex. Laborum in quod repellat autem. Perferendis iusto iure neque veniam nobis.\n\nDolorem omnis non aliquam corporis. Necessitatibus modi et et quam reiciendis animi accusamus.', NULL, '2019-11-29 23:32:47', '2019-12-03 08:40:20', '2019-12-03 08:40:20');
INSERT INTO `posts` VALUES (18, 'eum-rerum-est-laborum-dolor-cumque', 'Eum rerum est laborum dolor cumque.', 'Id corporis aut quos expedita architecto maxime. Animi sed consequatur ipsa quasi.\n\nQuam nemo aut et harum. Iusto quae alias perspiciatis vitae fuga deleniti perspiciatis dolore. Omnis fugit atque fugit non cumque rerum. Esse amet ipsa quas quisquam perspiciatis.\n\nUt exercitationem quis et occaecati. Sit enim praesentium commodi. Aut asperiores voluptatem at architecto ducimus minima perspiciatis. Porro soluta excepturi qui voluptatem voluptas.\n\nFacere exercitationem consequatur consequatur est autem illo vitae magnam. Voluptas quo non non ea. Ut aut est eaque fuga sed magnam rerum.\n\nNisi mollitia odit sint aut est qui est. Eos vel alias cumque voluptatibus voluptatem. Optio tempore et consequuntur. Veniam omnis quia iure molestias.\n\nTenetur aliquid fugiat velit in aut. Sed doloribus alias dolor explicabo et maiores soluta. Sequi magni animi velit.', NULL, '2019-11-10 08:09:31', '2019-12-03 08:40:20', '2019-12-03 08:40:20');
INSERT INTO `posts` VALUES (19, 'perspiciatis-culpa-illo-id-minima-asperiores-nam-quis-rerum-aut-dolorem-quibusdam-sapiente', 'Perspiciatis culpa illo id minima asperiores nam quis rerum aut dolorem quibusdam sapiente.', 'Error quia quaerat qui. Modi a illo quia tenetur. Laboriosam qui voluptatem et pariatur accusamus quis fuga.\n\nQuis ex dolores qui labore. Facilis suscipit nihil officiis odio quia deleniti. Totam laudantium iusto fugit consequuntur quidem. Asperiores et magni esse sapiente libero.\n\nPorro voluptatum placeat doloremque esse velit expedita earum. Mollitia error pariatur voluptatum. Et soluta et qui in. Qui culpa vel laboriosam iusto rerum eum.\n\nOptio ea quis nemo asperiores. Laborum aut in laborum. Autem nemo maiores quo sit aut. Omnis minus sint numquam.', NULL, '2019-11-16 18:27:11', '2019-12-03 08:40:20', '2019-12-03 08:40:20');
INSERT INTO `posts` VALUES (20, 'illum-in-porro', 'Illum in porro.', 'Voluptate similique incidunt eum ut omnis dolores quisquam. Sint eligendi in sequi atque in expedita velit. Quia illum illo consequatur. Nostrum omnis sed distinctio.\n\nQuas et dolore aliquam amet vel aperiam. Autem fugiat voluptatem et dolor. Dolor molestias et modi ipsum quaerat.\n\nIllo est quia velit quia dolorem. Rerum aut qui iusto. Voluptatem quasi nihil veniam nam magni.\n\nLibero dolores cumque ducimus quis. Voluptas maiores alias nihil ut est. Id itaque quis aut animi id. Sequi omnis minus qui incidunt nihil quis.\n\nCulpa aut dolor qui sint. Et cumque in rem tempore. Soluta et laborum et non. Dolorem praesentium quia enim aut ipsa sint.', NULL, '2019-11-16 12:35:03', '2019-12-03 08:40:21', '2019-12-03 08:40:21');

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `email_verified_at` timestamp(0) DEFAULT NULL,
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `remember_token` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp(0) DEFAULT NULL,
  `updated_at` timestamp(0) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `users_email_unique`(`email`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of users
-- ----------------------------
INSERT INTO `users` VALUES (2, 'shovain', 'shovain@qq.com', NULL, '$2y$10$6E4fBS0D29TXwjfYJx4cG.w1TsHC8bu/6gqJmIxA5Zngskr/POTAe', NULL, '2020-03-05 07:35:16', '2020-03-05 07:35:16');

SET FOREIGN_KEY_CHECKS = 1;
